{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Compression\"\n",
        "---\n",
        "\n",
        "Much of this section was taken from @gandhi2020. See also this [great blog post](https://blog.cleverelephant.ca/2015/02/geotiff-compression-for-dummies.html) by Paul Ramsey.\n",
        "\n",
        "## Raster Data Storage Requirements\n",
        "\n",
        "\n",
        "- The storage space required for an image depends on its dimensions and data type.  \n",
        "- Example:  \n",
        "  - An SRTM tile consists of a single band with a resolution of 3601 × 3601 pixels.  \n",
        "  - Each pixel is stored as an Int16 (16-bit integer), requiring 2 Bytes (1 Byte = 8 Bits).  \n",
        "  - The total storage needed is: $3601 \\times 3601 \\times 2 = 25,934,402 \\text{ Bytes} \\approx 25.93 \\text{ MB}$\n",
        "- Compression algorithms can be used to reduce the required storage space.  \n",
        "\n",
        "## Types of Compression\n",
        "\n",
        "\n",
        "- **Lossless Compression**  \n",
        "  - Preserves data quality without any loss.  \n",
        "  - The original data can be perfectly reconstructed.  \n",
        "  - Reduces file size by eliminating redundant information.  \n",
        "  - Commonly used for scientific data such as elevation models and satellite imagery.  \n",
        "  - Examples: LZW, DEFLATE, PACKBITS, ZSTD, ...  \n",
        "\n",
        "- **Lossy Compression**  \n",
        "  - Sacrifices some data quality to achieve higher compression.  \n",
        "  - The original data is approximated rather than perfectly reconstructed.  \n",
        "  - Allows for significantly smaller file sizes by discarding less perceptible details.\n",
        "  - Commonly used for photographic data such as aerial and drone imagery.  \n",
        "  - Examples: JPEG2000, WEBP (supports both lossy and lossless modes), ...  \n",
        "\n",
        "\n",
        "\n",
        "## How does compression work?\n",
        "\n",
        "- Given the pixel values: `100`, `101`, `102`, `100`, `100`  \n",
        "- Instead of storing each value individually, we can store each unique value once and keep track of its positions.  \n",
        "- Representation:  \n",
        "  - `100` → Appears at positions `[0, 3, 4]`  \n",
        "  - `101` → Appears at position `[1]`  \n",
        "  - `102` → Appears at position `[2]`  \n",
        "\n",
        "\n",
        "## Use of PREDICTOR\n",
        "\n",
        "\n",
        "- Some compression algorithms, such as LZW, DEFLATE, and ZSTD, can utilize a **predictor** to enhance compression efficiency.  \n",
        "- Instead of storing absolute values, a predictor stores only the differences between consecutive values.  \n",
        "- Available predictor methods:  \n",
        "  - No predictor (1, default)  \n",
        "  - Horizontal differencing (2)  \n",
        "  - Floating point prediction (3)  \n",
        "\n",
        "- **Example:**  \n",
        "  - **Original values:** `100, 101, 102, 100, 100`  \n",
        "  - **Values with predictor:** `100, 1, 1, -2, 0`  \n",
        "  \n",
        "  \n",
        "## Use of Tiling\n",
        "\n",
        "- By default, data is stored line by line.  \n",
        "- In many cases, storing and reading data in blocks of pixels improves efficiency.  \n",
        "- When the `TILED=YES` option is enabled, data is stored and compressed in **256 × 256 pixel** blocks.  \n",
        "\n",
        "\n",
        "## Compression Costs\n",
        "\n",
        "- Compression adds processing overhead during both data creation and retrieval.  \n",
        "- Highly compressed data may result in slower read times.  \n",
        "- In many applications, the reduction in disk space comes at the cost of increased processing time and CPU usage.  \n",
        "\n",
        "\n",
        "\n",
        "## Gdal_translate\n",
        "\n",
        "- [`gdal_translate`](https://gdal.org/en/stable/programs/gdal_translate.html) is a program to convert raster data between different formats\n",
        "- Note how the naming convention differs (snake case). The APIs for all the software vary slightly, always consult the documentation (e.g. using `--help`)\n",
        "- Some options are mutually exclusive. These are wrapped in extra `[]`. For example: `[[-strict]|[-not_strict]]` \n",
        "- Note how this program has two positional arguments: `<input_file>` and `<output_file>`\n",
        "\n",
        "```{bash}\n",
        "gdal_translate --help\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "### Compress `DEFLATE`\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "Input file size is 15401, 9121\n",
        "0...10...20...30...40...50...60...70...80...90...100 - done.\n",
        "```\n"
      ],
      "id": "7dd626d0"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/rata/miniconda3/envs/renku/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}