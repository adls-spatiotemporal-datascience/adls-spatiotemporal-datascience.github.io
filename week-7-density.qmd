---
echo: false
---

# Density Estimation {#sec-density}


## Data

The data set *rotmilan.gpkg* originates from a larger research project of the [Sempach Ornithological Institute](https://www.vogelwarte.ch/de/projekte/oekologische-forschung/mechanismen-der-populationsdynamik-beim-rotmilan) which can be accessed via the platform [movebank](http://www.movebank.org/panel_embedded_movebank_webapp?gwt_fragment=page%3Dsearch_map_linked%2CindividualIds%3D676571254%2Clat%3D44.465151013519666%2Clon%3D9.096679687499508%2Cz%3D5) platform [see @scherler2020]. This is a single individual that has been fitted with a transmitter since 2017 and is travelling across the whole of Central Europe. In this exercise, we only work with the data points that were recorded in Switzerland. If you would like to analyse the entire data set, you can download it via the Movebank link.



## Exercise 1: Kernel Density Estimation

To calculate the a 2D Kernel over our data, use the function `density` from the R package `spatstat`. 

:::{.callout-note}
- `x`, the *point pattern*, needs to be of class `ppp`. Use the function `as.ppp` to convert our red kite data
- `eps` is an argument passed on to `as.maks` to determine the output resolution / pixel size. Choose a reasonable size (not too pixelated, not to slow in computing)
- You can convert the output (of class `im`) to a raster using the function `terra::rast`
:::

- Try out different options for `sigma` and choose a reasonable parameter
- Try different functions to choose `sigma`: `bw.diggle`, `bw.CvL`, `bw.scott` and `bw.ppl`.


```{r}
#| eval: false


rotmilan <- st_read("data/week7-exercises/rotmilan.gpkg")
schweiz <- st_read("data/switzerland/schweiz.gpkg")

library("spatstat.geom")
library("spatstat.explore")


points_ppp <- as.ppp(rotmilan)

library(tmap)
library(purrr)
map(c(1000, 2000, 5000, 10000, 20000), \(sigma){
    x <- density(points_ppp, sigma =   sigma, eps = 2000) |> rast()
    names(x) <- sigma
    crs(x) <- "epsg:2056"
    x
    
  })  |> 
    rast() |> 
    tm_shape() + tm_raster(col.scale = tm_scale_continuous_pseudo_log(values = "Spectral", midpoint = NA)) + 
    tm_shape(schweiz) + tm_lines() +
    tm_layout(legend.show = FALSE)
```


## Exercise 2: Voronoi {#sec-density-voronoi}

Thiessen polygons offer an alternative for visualising differences in the density distribution of point data sets. You can create these using the function `sf::st_voronoi`.


:::{.callout-note}
- You have to combine the individual points to `MULTIPOINT` using the function `sf::st_union`.
- `st_voronoi` takes an `envelope` argument, however this only takes effect when it is larger than the default envelope. Use `sf::st_intersection` to clip your output to the boundary of switzerland.
:::

```{r}
#| eval: false


thiessenpolygone <- rotmilan |>
  st_union() |>
  st_voronoi()
schweiz <- st_union(schweiz)

thiessenpolygone <- st_cast(thiessenpolygone)

thiessenpolygone_clip <- st_intersection(thiessenpolygone, schweiz)

tm_shape(thiessenpolygone_clip) + tm_polygons()
```


