---
title: "Compression"
engine: knitr
---

Much of this section was taken from @gandhi2020. See also this [great blog post](https://blog.cleverelephant.ca/2015/02/geotiff-compression-for-dummies.html) by Paul Ramsey.

## Raster Data Storage Requirements


- The storage space required for an image depends on its dimensions and data type.  
- Example:  
  - An SRTM tile consists of a single band with a resolution of 3601 × 3601 pixels.  
  - Each pixel is stored as an Int16 (16-bit integer), requiring 2 Bytes (1 Byte = 8 Bits).  
  - The total storage needed is: $3601 \times 3601 \times 2 = 25,934,402 \text{ Bytes} \approx 25.93 \text{ MB}$
- Compression algorithms can be used to reduce the required storage space.  

## Types of Compression


- **Lossless Compression**  
  - Preserves data quality without any loss.  
  - The original data can be perfectly reconstructed.  
  - Reduces file size by eliminating redundant information.  
  - Commonly used for scientific data such as elevation models and satellite imagery.  
  - Examples: LZW, DEFLATE, PACKBITS, ZSTD, ...  

- **Lossy Compression**  
  - Sacrifices some data quality to achieve higher compression.  
  - The original data is approximated rather than perfectly reconstructed.  
  - Allows for significantly smaller file sizes by discarding less perceptible details.
  - Commonly used for photographic data such as aerial and drone imagery.  
  - Examples: JPEG2000, WEBP (supports both lossy and lossless modes), ...  



## How does compression work?

- Given the pixel values: `100`, `101`, `102`, `100`, `100`  
- Instead of storing each value individually, we can store each unique value once and keep track of its positions.  
- Representation:  
  - `100` → Appears at positions `[0, 3, 4]`  
  - `101` → Appears at position `[1]`  
  - `102` → Appears at position `[2]`  


## Use of PREDICTOR


- Some compression algorithms, such as LZW, DEFLATE, and ZSTD, can utilize a **predictor** to enhance compression efficiency.  
- Instead of storing absolute values, a predictor stores only the differences between consecutive values.  
- Available predictor methods:  
  - No predictor (1, default)  
  - Horizontal differencing (2)  
  - Floating point prediction (3)  

- **Example:**  
  - **Original values:** `100, 101, 102, 100, 100`  
  - **Values with predictor:** `100, 1, 1, -2, 0`  
  
  
## Use of Tiling

- By default, data is stored line by line.  
- In many cases, storing and reading data in blocks of pixels improves efficiency.  
- When the `TILED=YES` option is enabled, data is stored and compressed in **256 × 256 pixel** blocks.  


## Compression Costs

- Compression adds processing overhead during both data creation and retrieval.  
- Highly compressed data may result in slower read times.  
- In many applications, the reduction in disk space comes at the cost of increased processing time and CPU usage.  



## Gdal_translate

- [`gdal_translate`](https://gdal.org/en/stable/programs/gdal_translate.html) is a program to convert raster data between different formats
- Note how the naming convention differs (snake case). The APIs for all the software vary slightly, always consult the documentation (e.g. using `--help`)
- Some options are mutually exclusive. These are wrapped in extra `[]`. For example: `[[-strict]|[-not_strict]]` 
- Note how this program has two positional arguments: `<input_file>` and `<output_file>`

```{bash}
gdal_translate --help
```

### Convert to Geotiff

- In the last exercise, we reprojected a raster file to a geotiff file.
- However, for this exercise we will ignore this an concentrate on using `gdal_translate` to create a Geotiff and use compression


```{bash}
gdal_translate data/week5-exercises/dhm25_grid_raster.asc data-out/dhm25.tif
```

```{r}
#| echo: false

filesize2df <- function(file, comment){
  data.frame(
    # file = basename(file),
    comment = comment,
    size_mb = round(file.size(file)/1024^2,2)
    )
}


bind_print <- function(...){
  rbind(...) |> 
    dplyr::mutate(difference = paste(round((size_mb/size_mb[1]-1)*100),"%")) |> 
    knitr::kable(col.names = c("File", "Size (MB)", "Difference"),align = "lrr")
}
```


- Let's compare the file sizes:

```{r}
#| echo: false

size0 <- filesize2df("data/week5-exercises/dhm25_grid_raster.asc", "Original File (ASCII)")

size1 <- filesize2df("data-out/dhm25.tif", "GeoTIFF (without compression)")


bind_print(size0, size1)

```



### Compress `DEFLATE`

- We can now compress the file using the `DEFLATE` algorithm with the `-co` argument


```{bash}
#| eval: false
gdal_translate data/week5-exercises/dhm25_grid_raster.asc data-out/dhm25_2.tif  \ 
  -co COMPRESS=DEFLATE 
```

```
Input file size is 15401, 9121
0...10...20...30...40...50...60...70...80...90...100 - done.
```


```{r}
#| echo: false

size2 <- filesize2df("data-out/dhm25_2.tif", "`COMPRESS=DEFLATE`")



bind_print(size0, size1, size2)

```


### Compress `TILED=YES`

```{r}
tictoc::tic(msg = "trans")
```


```{bash}
#| eval: true
gdal_translate data-out/dhm25.tif data-out/dhm25_3.tif \
  -co COMPRESS=DEFLATE \
  -co TILED=YES
```

```{r}
tictoc::toc(log = TRUE)
```



```{r}
#| echo: false

size3 <- filesize2df("data-out/dhm25_3.tif", "`TILED=YES`")



bind_print(size0, size1, size2, size3)

```


### Compress `PREDICTOR=3`


```{bash}
#| eval: false

gdal_translate data-out/dhm25.tif data-out/dhm25_4.tif  \ 
  -co COMPRESS=DEFLATE \
  -co TILED=YES \
  -co PREDICTOR=3
```


```{r}
#| echo: false

size4 <- filesize2df("data-out/dhm25_4.tif", "`TILED=YES`")



bind_print(size0, size1, size2, size3, size4)

```

